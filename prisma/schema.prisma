// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  trips         Trip[]    @relation("OwnedTrips")

  // Sharing relations
  tripShares    TripShare[] @relation("UserShares")
  invitesSent   TripShare[] @relation("InvitedBy")
  invitations   TripInvite[]
  
  // Payment relations
  payments      Payment[]
  paymentSplits PaymentSplit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Trip {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  startDate   DateTime
  endDate     DateTime
  budget      Float? // Total budget for the trip
  userId      String // Owner of the trip
  user        User     @relation("OwnedTrips", fields: [userId], references: [id], onDelete: Cascade)

  locations      Location[]
  accommodations Accommodation[]
  flights        Flight[]
  expenses       Expense[]

  // Sharing fields
  shares      TripShare[]
  invites     TripInvite[]
  isPublic    Boolean  @default(false)
  shareToken  String?  @unique // For public read-only sharing
  
  // Payment tracking
  payments    Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id            String    @id @default(cuid())
  locationTitle String
  address       String? // Full formatted address
  latitude      Float
  longitude     Float
  day           Int       @default(1) // Which day of the trip this location belongs to
  startTime     DateTime? // When to visit this location
  endTime       DateTime? // When to leave this location
  duration      Int? // Duration in minutes (auto-calculated or manual)
  notes         String? // Notes about this location (activities, tips, etc.)
  cost          Float? // Cost for this location/activity
  category      String? // Category: food, transport, activity, shopping, etc.
  tripId        String
  trip          Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)
  order         Int       @default(0)

  // Link to payment tracking
  payments      Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Accommodation {
  id                 String   @id @default(cuid())
  name               String // Hotel/Airbnb name
  address            String?
  checkInDate        DateTime
  checkOutDate       DateTime
  confirmationNumber String?
  bookingLink        String?
  cost               Float?
  notes              String?
  tripId             String
  trip               Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  // Link to payment tracking
  payment            Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flight {
  id               String   @id @default(cuid())
  airline          String // Airline name (e.g., "Singapore Airlines")
  flightNumber     String // Flight number (e.g., "SQ123")
  departureAirport String // Departure airport code or name (e.g., "SIN - Singapore")
  arrivalAirport   String // Arrival airport code or name (e.g., "NRT - Tokyo")
  departureTime    DateTime // Departure date and time
  arrivalTime      DateTime // Arrival date and time
  bookingReference String? // Booking/confirmation number
  cost             Float? // Ticket cost
  seatNumber       String? // Seat assignment (e.g., "12A")
  notes            String? // Additional notes
  tripId           String
  trip             Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  // Link to payment tracking
  payment          Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id          String @id @default(cuid())
  description String // Description of the expense
  amount      Float // Cost of the expense
  category    String // Category: food, transport, activity, shopping, entertainment, other
  tripId      String
  trip        Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)

  // Link to payment tracking (if expense is paid by someone)
  payment     Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Trip sharing model
model TripShare {
  id        String   @id @default(cuid())
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  userId    String // The user being given access
  user      User     @relation("UserShares", fields: [userId], references: [id], onDelete: Cascade)
  role      String   @default("viewer") // "viewer", "editor", "admin"
  invitedBy String // User who sent the invite
  inviter   User     @relation("InvitedBy", fields: [invitedBy], references: [id])
  createdAt DateTime @default(now())

  @@unique([tripId, userId]) // One share per user per trip
}

// Trip invitation model (for email invites before user accepts)
model TripInvite {
  id        String   @id @default(cuid())
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  email     String
  token     String   @unique @default(cuid())
  role      String   @default("viewer") // "viewer", "editor"
  invitedBy String
  inviter   User     @relation(fields: [invitedBy], references: [id])
  expiresAt DateTime
  accepted  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([token])
  @@index([email])
}

// Payment tracking model
model Payment {
  id          String   @id @default(cuid())
  tripId      String
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  paidBy      String   // User who paid
  payer       User     @relation(fields: [paidBy], references: [id])
  amount      Float
  currency    String   @default("SGD")
  description String
  category    String?  // "accommodation", "flight", "food", "transport", etc.

  // What this payment is linked to (optional)
  expenseId        String?        @unique
  expense          Expense?       @relation(fields: [expenseId], references: [id])
  accommodationId  String?        @unique
  accommodation    Accommodation? @relation(fields: [accommodationId], references: [id])
  flightId         String?        @unique
  flight           Flight?        @relation(fields: [flightId], references: [id])
  locationId       String?
  location         Location?      @relation(fields: [locationId], references: [id])

  // Split info
  splitType   String         @default("equal") // "equal", "custom", "percentage"
  splits      PaymentSplit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Payment split model (who owes what portion of a payment)
model PaymentSplit {
  id        String    @id @default(cuid())
  paymentId String
  payment   Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  amount    Float // Their share of the payment
  settled   Boolean   @default(false)
  settledAt DateTime?

  @@unique([paymentId, userId])
}
